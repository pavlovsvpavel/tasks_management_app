{
	"info": {
		"_postman_id": "acb08d6d-503c-4695-89cc-7be5c68987b6",
		"name": "tasks-app",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25457071"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "Register",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{username}}\",\n    \"password\": \"{{password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const res = pm.response.json();",
									"",
									"pm.environment.set(\"current_access_token\", res.tokens['access_token']);",
									"pm.environment.set(\"current_refresh_token\", res.tokens['refresh_token']);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/users/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "User profile details",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{current_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{base_url}}/users/profile-details",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"profile-details"
							]
						}
					},
					"response": []
				},
				{
					"name": "User profile update",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{current_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"full_name\": \"Admin\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/profile-update",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"profile-update"
							]
						}
					},
					"response": []
				},
				{
					"name": "User password change",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"current_password\": \"{{password}}\",\n  \"new_password\": \"{{new_password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/change-password",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"change-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@example.com\",\n  \"password\": \"qwer\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/users/logout",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"logout"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Tasks",
			"item": [
				{
					"name": "Create task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const res = pm.response.json();",
									"",
									"pm.environment.set(\"current_task_id\", res.id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// --- 1. Random Name Generator ---",
									"function generateRandomName(length) {",
									"  const characters = 'abcdefghijklmnopqrstuvwxyz0123456789';",
									"  let result = '';",
									"  for (let i = 0; i < length; i++) {",
									"    result += characters.charAt(Math.floor(Math.random() * characters.length));",
									"  }",
									"  return result;",
									"}",
									"const taskRandomName = generateRandomName(8);",
									"pm.environment.set('task_random_title', taskRandomName);",
									"",
									"// --- 2. Random Description Generator ---",
									"const descriptionTemplates = [",
									"    \"Finish the report for the Q3 review.\",",
									"    \"Follow up with the design team about the new mockups.\",",
									"    \"Deploy the latest changes to the staging server.\",",
									"    \"Review the pull request from the new developer.\",",
									"    \"Schedule a meeting to discuss project milestones.\",",
									"    \"Investigate the performance issue on the main dashboard.\",",
									"    \"Write documentation for the new API endpoint.\"",
									"];",
									"const taskRandomDescription = descriptionTemplates[Math.floor(Math.random() * descriptionTemplates.length)];",
									"pm.environment.set('task_random_description', taskRandomDescription);",
									"",
									"// --- 3. Random Due Date Generator ---",
									"function generateRandomDueDate() {",
									"    const today = new Date();",
									"    // Generate a random number of days to add (e.g., between 1 and 30 days from now)",
									"    const randomDays = Math.floor(Math.random() * 30) + 1;",
									"    const futureDate = new Date(today);",
									"    futureDate.setDate(today.getDate() + randomDays);",
									"    ",
									"    // Format the date to ISO 8601 string, which your backend expects (e.g., \"2024-08-28T15:30:00.000Z\")",
									"    return futureDate.toISOString();",
									"}",
									"const taskRandomDueDate = generateRandomDueDate();",
									"pm.environment.set('task_random_due_date', taskRandomDueDate);",
									"",
									"// --- 4. Random Priority Generator ---",
									"const priorities = ['low', 'medium', 'high'];",
									"// Pick a random priority from the array",
									"const taskRandomPriority = priorities[Math.floor(Math.random() * priorities.length)];",
									"pm.environment.set('task_random_priority', taskRandomPriority);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{current_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"{{task_random_title}}\",\n    \"description\": \"{{task_random_description}}\",\n    \"completed\": false,\n    \"due_date\": \"{{task_random_due_date}}\",\n    \"priority\": \"{{task_random_priority}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tasks/create",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all user's tasks",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{current_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tasks/get/all-tasks",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks",
								"get",
								"all-tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get single task",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{current_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tasks/get/{{current_task_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks",
								"get",
								"{{current_task_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update task",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomName(length) {",
									"  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';",
									"  let result = '';",
									"  for (let i = 0; i < length; i++) {",
									"    result += characters.charAt(Math.floor(Math.random() * characters.length));",
									"  }",
									"  return result;",
									"}",
									"",
									"const taskRandomName = generateRandomName(8);",
									"",
									"pm.environment.set('updated_task_random_name', taskRandomName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{updated_task_random_name}}\",\n    \"description\": \"string\",\n    \"completed\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tasks/update/{{current_task_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks",
								"update",
								"{{current_task_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete task",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{current_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tasks/delete/{{current_task_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks",
								"delete",
								"{{current_task_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Tokens",
			"item": [
				{
					"name": "Refresh",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const res = pm.response.json();",
									"",
									"console.log(\"Response from /refresh-token:\", JSON.stringify(res, null, 2));",
									"",
									"// Always set the new access token",
									"pm.environment.set(\"current_access_token\", res.access_token);",
									"",
									"// Check if refresh_token exists and is different from the old one",
									"const oldRefreshToken = pm.environment.get(\"current_refresh_token\");",
									"if (res.refresh_token && res.refresh_token !== oldRefreshToken) {",
									"    console.log(\"New refresh token detected. Updating environment.\");",
									"    pm.environment.set(\"current_refresh_token\", res.refresh_token);",
									"} else {",
									"    console.log(\"No new refresh token provided. Keeping old one.\");",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{current_refresh_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/auth/refresh-token",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"refresh-token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{current_refresh_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/auth/validate-token",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"validate-token"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Google",
			"item": [
				{
					"name": "Google callback",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/auth/callback?code=322482378303-sph30urma129opi4osnk8gbufde0cbp2.apps.googleusercontent.com",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"callback"
							],
							"query": [
								{
									"key": "code",
									"value": "322482378303-sph30urma129opi4osnk8gbufde0cbp2.apps.googleusercontent.com"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Google Login",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/auth/login/google",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"login",
								"google"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}